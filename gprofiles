#!/usr/bin/env ruby
# -*- ruby -*-

require 'rubygems' if RUBY_VERSION < '1.9'
require 'sinatra'

module NodeHelpers

  def render
    parent = @parent ? @parent.link_to : ''
    kids = @children.collect do | child |
      child.link_to
    end
    <<EOT
#{ parent }<br />
|<br />
v<br />
<h3>#{ info }</h3>
|<br />
v<br />
#{ kids.join( "&nbsp;") }<br />
EOT
  end

  def link_to
    "<a href='/#{ @nid }'>#{ info }</a>"
  end

end

class Node
  include NodeHelpers

  attr_accessor :nid
  attr_accessor :pid
  attr_accessor :parent
  attr_accessor :label
  attr_accessor :weight
  attr_accessor :children

  def initialize( chunk )
    @nid       = nil
    @pid       = nil
    @parent    = nil
    @label     = ''
    @children  = []
    @weight    = 0.0
    parse( chunk )
  end

  def info
    "#{ @label } (#{ @weight }%)"
  end

  private

  def parse( chunk )
    #          1         2                3           4            5 = rest
    #          id        time             self        children     called   name
    rgx = /^\[(\d+)\]\s+(\d+\.\d+)\s{4}(\d+\.\d+)\s{4}(\d+\.\d+)\s+(.*)$/
    m = chunk.match( rgx )
    raise "root line not found in '#{ chunk }'" if m.nil?
    start     = m.pre_match
    @nid      = m[ 1 ].to_i
    @weight   = m[ 2 ].to_f
    rest      = m[ 5 ]

    # strip call count
    rest.gsub!( /^\d+(\/\d+)?\s+/, '' )
    m        = rest.match( /^(.*?)\s+\[\d+\]$/ )
    raise "unexpected rest format: #{ rest }" if m.nil?
    @label   = m[ 1 ]

    m        = start.match( /\[(\d+)\]$/ )
    @pid     = m[ 1 ].to_i unless m.nil?
  end

end

class Profile

  attr_reader :nodes

  def initialize( path_name )
    @path_name = path_name
    parse
  end

  private

  def parse
    raw = File.read( @path_name )
    parse_raw( raw )
    set_parent
  end

  def parse_raw( raw )
    @nodes = []
    each_chunk( raw ) do | chunk |
      node              = Node.new( chunk )
      @nodes[ node.nid ] = node
    end
  end

  def each_chunk( raw )
    # skip to the first entry
    start = raw.match( /index\s+%\s+time\s+self.*\n/ )
    raise "start not found" if start.nil?
    rest  = start.post_match
    lines = rest.split(/^-{10,}/)
    lines.pop # lose the doc page and index
    lines.each do | line |
      yield line
    end
  end

  def set_parent
    @nodes.each.with_index do | node, i |
      if node
        if node.pid
          parent      = nodes[ node.pid ]
          node.parent = parent
          if parent
            parent.children << node
          else
            $stderr.puts "Parent missing: #{ node.pid }"
          end
        else
          $stderr.puts "No parent: #{ i }"
        end
      else
        $stderr.puts "No node: #{ i }"
      end
    end
  end

end

raise "No file argument supplied"       if ARGV[ 0 ].nil?
raise "File '#{ ARGV[ 0 ] }' not found" if ! File.exist?( ARGV[ 0 ] )

$prof = Profile.new( ARGV[ 0 ] )

get '/' do
  $prof.nodes[ 1 ].render
end

get '/:nid' do
  nid = params[ :nid ].to_i
  $prof.nodes[ nid ].render
end
